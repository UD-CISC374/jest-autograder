#!/usr/bin/env bash

# START: Sets correct directories based on local dev machine vs Gradescope production
if [ -f "/autograder/harness.py" ]; then
    echo "[GS] Running on Gradescope container, using Gradescope vars"
    DIR="/autograder/source"
    OUTPUT_DIR="/autograder/results"
    STUDENT_SUBMISSION_DIR="/autograder/submission"
else
    echo "[GS] Running on local dev machine, using ./localautograder/ "
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    OUTPUT_DIR="$DIR/localautograder/results"
    echo "num args $#"
    if [ "$#" -lt 1 ]; then
      STUDENT_SUBMISSION_DIR="$DIR/localautograder/submission"
    else
      STUDENT_SUBMISSION_DIR="$1"
    fi
fi
PYTHON_JSON_TOOL="$DIR/tools/json_generator.py"
JEST_JSON_TOOL="$DIR/tools/jest_to_gradescope.py"

source "$DIR"/grading.config
# END: Sets correct directories based on local dev machine vs Gradescope production


###########################################################################################
#
#   Prepare student files for submission:
#       - Unzip all zip files, search for /src/main/, and move to staging/src/main/
#       - Print elegant error if src not found showing all files that were found
#
###########################################################################################
cd $STUDENT_SUBMISSION_DIR

echo '[GS] Extracting zips in student submission...'
find . -name "*.zip" | while read filename; do unzip -o -d "`dirname "$filename"`" "$filename"; done;

# Clean out __MACOSX directories and hidden files
find . -name "__MACOSX" -exec rm -rf {} \;

# Remove old results.json files
rm -r "$OUTPUT_DIR"/*.json

# Searches student code for a DIR_TO_COPY($1), and copies it to DESTINATION_TS_SRC($2)
# Called below
copy_student_directory () {
    DIR_TO_COPY=$1
    DESTINATION_TS_SRC=$2

    STUDENT_SUBMISSION_TS_SRC=$(find . -path "*/$DIR_TO_COPY");
    if [ -n "$STUDENT_SUBMISSION_TS_SRC" ]
    then
        echo "[GS] Found student $DIR_TO_COPY directory at $STUDENT_SUBMISSION_TS_SRC";
        echo "  [GS] Copying $STUDENT_SUBMISSION_TS_SRC to $DESTINATION_TS_SRC";
        rm -rf $DESTINATION_TS_SRC/*
        cp -r $STUDENT_SUBMISSION_TS_SRC/* $DESTINATION_TS_SRC/
        echo "  [GS] Copy complete!"
        # Optionally output successful finding of src/main
        if [ "$CONFIG_OUTPUT_PASSING_SANITY_TESTS" = true ] ; then
            python3 "$PYTHON_JSON_TOOL" -p -t "Found required $DIR_TO_COPY directory in student submission"> "$OUTPUT_DIR"/results01.json
        fi
    else
        echo "[GS] Could not find "$DIR_TO_COPY" in unpacked student submission ("$STUDENT_SUBMISSION_DIR"). Exiting...";
        FOUND_FILES=$(ls -R)

        # Generate error for results.json
        python3 "$PYTHON_JSON_TOOL" -t "Unable to find "$DIR_TO_COPY" in student submission" -b \
        "The following files were found in student submission. If no directory structure is displayed,
        try compressing your code before submitting it:
        $FOUND_FILES" > "$OUTPUT_DIR"/results00.json
        error_exit
    fi
}

error_exit()
{
  echo "[GS] ERROR EXIT: Compiling results**.json files to results.json"
  python3 $PYTHON_JSON_TOOL -c $OUTPUT_DIR
  exit 1
}

if [ "$CONFIG_TEST_STUDENT_MAIN" = true ] ; then
    DIRECTORY_SOUGHT="typescript/src/main"
    copy_student_directory "$DIRECTORY_SOUGHT" "$DIR"/staging_main/${DIRECTORY_SOUGHT}

    PUBLIC_FOLDER="typescript/public"
    copy_student_directory "$PUBLIC_FOLDER" "$DIR"/staging_main/${PUBLIC_FOLDER}

    "$DIR"/run_main_tests

fi

# Compile json results
echo "[GS] Compiling results**.json files to results.json"
python3 $PYTHON_JSON_TOOL -c $OUTPUT_DIR